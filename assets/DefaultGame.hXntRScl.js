const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/Game.BiQ7ebIs.js","assets/jsx-runtime.CRkqtJS5.js","assets/index.B52nOzfP.js","assets/SocialIcon.t2dz2qvD.js","assets/ButtonPromise.UqonaXA1.js","assets/Toast.Store.MijDvoQc.js"])))=>i.map(i=>d[i]);
import{j as g}from"./jsx-runtime.CRkqtJS5.js";import{R as L,r as x}from"./index.B52nOzfP.js";import{m as T,u as N}from"./SocialIcon.t2dz2qvD.js";import{d as G,t as v}from"./Toast.Store.MijDvoQc.js";const I="modulepreload",b=function(e){return"/"+e},y={},D=function(t,r,o){let s=Promise.resolve();if(r&&r.length>0){document.getElementsByTagName("link");const l=document.querySelector("meta[property=csp-nonce]"),u=l?.nonce||l?.getAttribute("nonce");s=Promise.allSettled(r.map(c=>{if(c=b(c),c in y)return;y[c]=!0;const a=c.endsWith(".css"),h=a?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${h}`))return;const d=document.createElement("link");if(d.rel=a?"stylesheet":I,a||(d.as="script"),d.crossOrigin="",d.href=c,u&&d.setAttribute("nonce",u),document.head.appendChild(d),a)return new Promise((A,W)=>{d.addEventListener("load",A),d.addEventListener("error",()=>W(new Error(`Unable to preload CSS for ${c}`)))})}))}function n(l){const u=new Event("vite:preloadError",{cancelable:!0});if(u.payload=l,window.dispatchEvent(u),!u.defaultPrevented)throw l}return s.then(l=>{for(const u of l||[])u.status==="rejected"&&n(u.reason);return t().catch(n)})},j=L.lazy(()=>D(()=>import("./Game.BiQ7ebIs.js"),__vite__mapDeps([0,1,2,3,4,5])));function C({path:e}){return g.jsx(g.Fragment,{children:g.jsx(x.Suspense,{fallback:g.jsx("p",{children:"Loading..."}),children:g.jsx(j,{path:e})})})}const m=T({tries:6,length:5,lang:"en"}),_=(e,t)=>{const r=typeof t=="string"?t:JSON.stringify(t);localStorage.setItem(e,r)},$=e=>{const t=localStorage.getItem(e);if(!t)return{};try{return JSON.parse(t)}catch(r){return console.error("Error parsing JSON from localStorage:",r),t}},O=e=>{if(!localStorage.getItem(e)){console.log("Storage not found");return}localStorage.removeItem(e)},P=e=>JSON.parse(JSON.stringify(e)),k=e=>JSON.parse(e),J=e=>JSON.stringify(e),S={set:_,get:$,remove:O,inmutable:P,parse:k,stringify:J},p=async(e,t,r)=>{try{const o=await fetch(`/api/${e}/${t}/${r}`);if(!o.ok)throw new Error(`Error ${o.status}: No se pudo obtener las palabras`);return await o.json()}catch(o){console.log(o)}},M=async(e,t)=>{try{const r=await p("game",e,t),o=await Math.floor(Math.random()*(r.length+1));return r[o]}catch(r){console.log(r)}},U=async(e,t,r)=>(await p("dic",t,r)).includes(e.toLowerCase()),E={getWord:M,getByLangLength:p,existWord:U},V=(e,t)=>{let r=Array(e.length).fill("false"),o={};e.split("").forEach(n=>{o[n]=(o[n]||0)+1});for(let n=0;n<e.length;n++)t[n]===e[n]&&(r[n]="true",o[t[n]]-=1);for(let n=0;n<e.length;n++)r[n]==="false"&&o[t[n]]>0&&(r[n]="exist",o[t[n]]-=1);const s=r.every(n=>n==="true");return{result:r,isWin:s}},K=async(e,t,r)=>{const o=S.get(`wordguess-${e}`).game||w;if(o?.word==="")try{const s=await E.getWord(t,r);o.word=s}catch(s){console.error("Error fetching word:",s),o.isWin=!1}i.set(o),R(e)},R=e=>{S.set(`wordguess-${e}`,{game:i.get(),setting:m.get()})},f={compareWord:V,saveLocal:R,validatePrevData:K},w={word:"",guess:"",valid:Array.from({length:6},()=>Array.from({length:5},()=>({letter:"",state:void 0}))),currentRow:0,currentLetter:0,isWin:void 0,restart:!1},i=G(w),q=e=>{const t=i.get(),r=m.get();if(t.currentLetter>=r.length||t.isWin||t.currentRow>=r.tries)return;const o=t.valid[t.currentRow][t.currentLetter];o.letter=e,o.state=void 0,i.setKey("currentLetter",t.currentLetter+1)},B=()=>{const e=i.get();if(e.currentLetter<=0||e.isWin||e.currentRow>=e.valid.length)return;const t=[...e.valid],r=e.currentLetter-1,s=e.valid[e.currentRow][e.currentLetter]?.letter?e.currentLetter:r;s<0||(t[e.currentRow][s]={letter:"",state:void 0},i.set({...e,currentLetter:s,valid:t}))},F=async e=>{const t={...i.get()},r=m.get();if(t.isWin||t.currentRow>t.valid.length-1)return;const o=t.valid[t.currentRow].every(a=>a.letter),s=document.querySelector(`[data-row="${t.currentRow}"]`),n=a=>{s?.classList.add("error"),v.error(a),setTimeout(()=>{s?.classList.remove("error")},400)};if(!o){n("Field is not complete");return}v.dismiss();const l=t.valid[t.currentRow].map(a=>a.letter).join("");if(!await E.existWord(l,r.lang,r.length)){n("Invalid word");return}const c=f.compareWord(t.word.toUpperCase(),l.toUpperCase());if(c.result.forEach((a,h)=>{t.valid[t.currentRow][h].state=a}),c.isWin){i.setKey("isWin",!0),f.saveLocal(e);return}else if(t.currentRow===t.valid.length-1){i.setKey("isWin",!1),f.saveLocal(e),setTimeout(()=>{v.show(t.word)},t.valid[0].length*260);return}t.currentLetter=0,t.currentRow=t.currentRow+1,t.guess="",i.set(t),f.saveLocal(e)},Y=e=>{const t=m.get(),r={...w,valid:Array.from({length:t.tries},()=>Array.from({length:t.length},()=>({letter:"",state:void 0})))};i.set(r),f.saveLocal(e),document.querySelectorAll(".key-box").forEach(s=>s.removeAttribute("data-valid"))},Z={typing:q,backspace:B,enter:F,restart:Y};function ee(){const e=N(m);return L.useEffect(()=>{f.validatePrevData("default",e.lang,e.length)},[]),g.jsx(C,{path:"default"})}export{ee as D,E as G,Z as M,m as _,i as a};
